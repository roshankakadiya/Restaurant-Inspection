Index: app/src/main/java/com/example/cmpt276group05/model/InspectionManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cmpt276group05.model;\r\n\r\nimport android.content.Context;\r\nimport android.util.Log;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.example.cmpt276group05.R;\r\nimport com.opencsv.CSVReader;\r\nimport com.opencsv.exceptions.CsvValidationException;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.Date;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\n/*\r\n * Manager for Inspection objects. Has methods for sorting and adding/ deleting inspections\r\n */\r\n\r\n\r\npublic class InspectionManager implements Iterable<Inspection>{\r\n\r\n    private static List<Inspection> inspectionList = new ArrayList<>();\r\n    private static Context context;\r\n    // Allows access to files\r\n\r\n    @Override\r\n    public Iterator<Inspection> iterator() {\r\n        return inspectionList.iterator();\r\n    }\r\n\r\n    // Singleton Support\r\n    private static InspectionManager instance;\r\n    private InspectionManager() {\r\n        // Prevent anyone else from instantiating\r\n    }\r\n\r\n    public static InspectionManager getInstance(Context ctx) {\r\n        if (instance == null) {\r\n            instance = new InspectionManager();\r\n            context = ctx.getApplicationContext();\r\n            readInspectionData();\r\n        }\r\n        sortArrayList();\r\n        return instance;\r\n    }\r\n\r\n    public static void add(Inspection inspection) {\r\n        inspectionList.add(inspection);\r\n    }\r\n\r\n    // Get inspection at index\r\n    public static Inspection get(int index) {\r\n        return inspectionList.get(index);\r\n    }\r\n\r\n    // Get list of inspections relating to tracking number, in most recent order\r\n    // Assumes list is presorted\r\n    public List<Inspection> getList(String trackingNumber) {\r\n        List<Inspection> listOfInspections = new ArrayList<>();\r\n        boolean foundCluster = false;\r\n        boolean endOfCluster = false;\r\n        int index = 0;\r\n        while (!foundCluster || !endOfCluster) {\r\n            if (inspectionList.get(index).getTrackingNumber().equals(trackingNumber)) {\r\n                listOfInspections.add(inspectionList.get(index));\r\n                foundCluster = true;\r\n\r\n            // Reaching this condition implies that you reached the end of the cluster\r\n            } else if (foundCluster){\r\n                endOfCluster = true;\r\n            }\r\n\r\n            index++;\r\n        }\r\n        return listOfInspections;\r\n    }\r\n\r\n    public int getNumInspection() {\r\n        return inspectionList.size();\r\n    }\r\n\r\n    public void removeAtIndex(int index) {\r\n        inspectionList.remove(index);\r\n    }\r\n\r\n    // Sorts by restaurants, then sorts clustered restaurant inspections by most recent inspection\r\n    private static void sortArrayList() {\r\n        Collections.sort(inspectionList, Comparator.comparing(Inspection::getTrackingNumber)\r\n                    .thenComparing(Inspection::getInspectionDate).reversed());\r\n    }\r\n\r\n    private static void readInspectionData() {\r\n        InputStream is = context.getResources().openRawResource(R.raw.inspectionreports_itr1);\r\n        BufferedReader reader = new BufferedReader(\r\n                new InputStreamReader(is, StandardCharsets.UTF_8)\r\n        );\r\n        CSVReader csvReader = new CSVReader(reader);\r\n\r\n        String[] line = new String[7];\r\n\r\n        try {\r\n            // Skip over header\r\n            csvReader.readNext();\r\n\r\n            while ((line = csvReader.readNext()) != null) {\r\n                Inspection inspection = new Inspection();\r\n                inspection.setTrackingNumber(line[0]);\r\n\r\n                // Formatting with date\r\n                SimpleDateFormat format = new SimpleDateFormat(\"yyyyMMdd\", Locale.CANADA);\r\n                Date date = format.parse(line[1]);\r\n                inspection.setInspectionDate(date);\r\n\r\n                inspection.setInspectionType(line[2]);\r\n                inspection.setNumCritViolations(Integer.parseInt(line[3]));\r\n                inspection.setNumNonCritViolations(Integer.parseInt(line[4]));\r\n                inspection.setHazardRating(line[5]);\r\n                inspection.setViolationReport(line[6]);\r\n\r\n                inspectionList.add(inspection);\r\n\r\n                Log.d(\"Myactivity\", \"Just Created: \" + inspection);\r\n            }\r\n        } catch (IOException | CsvValidationException | ParseException e) {\r\n            Log.wtf(\"MyActivity\", \"Error reading data file on line \" + line, e);\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Gets most recent inspection using tracking number of restaurant. Use only if tracking number\r\n    // is known\r\n    public Inspection getMostRecentInspection(String trackingNumber) {\r\n        for (int x = 0; x < inspectionList.size(); x++) {\r\n            if (inspectionList.get(x).getTrackingNumber().equals(trackingNumber)) {\r\n                return inspectionList.get(x);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public int numOfIssuesFound(String trackingNumber) {\r\n        Inspection target = getMostRecentInspection(trackingNumber);\r\n        return target.getNumCritViolations() + target.getNumNonCritViolations();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/cmpt276group05/model/InspectionManager.java	(revision 630a083b0ffc0b0eaa19ae3e75cb439ec3dab9d4)
+++ app/src/main/java/com/example/cmpt276group05/model/InspectionManager.java	(date 1604434439828)
@@ -154,4 +154,6 @@
         Inspection target = getMostRecentInspection(trackingNumber);
         return target.getNumCritViolations() + target.getNumNonCritViolations();
     }
+
+
 }
